{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nconst todosApi = createApi({\n  reducerPath: 'todos',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://todo-list-backend-nvp1.onrender.com',\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const token = getState().auth.token; // Access the auth token from the state\n      if (token) {\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Todo'],\n  endpoints(builder) {\n    return {\n      // Authentication endpoints\n      login: builder.mutation({\n        query: credentials => ({\n          url: '/api/auth/login',\n          method: 'POST',\n          body: credentials\n        })\n      }),\n      register: builder.mutation({\n        query: userData => ({\n          url: '/api/auth/register',\n          method: 'POST',\n          body: userData\n        })\n      }),\n      logout: builder.mutation({\n        query: () => ({\n          url: '/api/auth/logout',\n          method: 'POST'\n        })\n      }),\n      // Todos endpoints\n      fetchTodos: builder.query({\n        query: () => '/api/todos',\n        providesTags: result => result ? [...result.map(({\n          id\n        }) => ({\n          type: 'Todo',\n          id\n        })), {\n          type: 'Todo',\n          id: 'LIST'\n        }] : [{\n          type: 'Todo',\n          id: 'LIST'\n        }]\n      }),\n      addTodo: builder.mutation({\n        query: newTodo => ({\n          url: '/api/todos',\n          method: 'POST',\n          body: newTodo\n        }),\n        invalidatesTags: [{\n          type: 'Todo',\n          id: 'LIST'\n        }]\n      })\n    };\n  }\n});\nexport const {\n  useLoginMutation,\n  useRegisterMutation,\n  useLogoutMutation,\n  useFetchTodosQuery,\n  useAddTodoMutation\n} = todosApi;\nexport default todosApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","todosApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","token","auth","set","tagTypes","endpoints","builder","login","mutation","query","credentials","url","method","body","register","userData","logout","fetchTodos","providesTags","result","map","id","type","addTodo","newTodo","invalidatesTags","useLoginMutation","useRegisterMutation","useLogoutMutation","useFetchTodosQuery","useAddTodoMutation"],"sources":["/Users/anbschool0021/Documents/Backend-frontend/frontend/src/store/apis/todosApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst todosApi = createApi({\n    reducerPath: 'todos',\n    baseQuery: fetchBaseQuery({\n        baseUrl: 'https://todo-list-backend-nvp1.onrender.com',\n        prepareHeaders: (headers, { getState }) => {\n            const token = getState().auth.token;  // Access the auth token from the state\n            if (token) {\n                headers.set('Authorization', `Bearer ${token}`);\n            }\n            return headers;\n        },\n    }),\n    tagTypes: ['Todo'],\n    endpoints(builder) {\n        return {\n            // Authentication endpoints\n            login: builder.mutation({\n                query: (credentials) => ({\n                    url: '/api/auth/login',\n                    method: 'POST',\n                    body: credentials,\n                }),\n            }),\n            register: builder.mutation({\n                query: (userData) => ({\n                    url: '/api/auth/register',\n                    method: 'POST',\n                    body: userData,\n                    \n                }),\n            }),\n            logout: builder.mutation({\n                query: () => ({\n                    url: '/api/auth/logout',\n                    method: 'POST',\n                }),\n            }),\n            // Todos endpoints\n            fetchTodos: builder.query({\n                query: () => '/api/todos',\n                providesTags: (result) =>\n                    result\n                        ? [...result.map(({ id }) => ({ type: 'Todo', id })), { type: 'Todo', id: 'LIST' }]\n                        : [{ type: 'Todo', id: 'LIST' }],\n            }),\n            addTodo: builder.mutation({\n                query: (newTodo) => ({\n                    url: '/api/todos',\n                    method: 'POST',\n                    body: newTodo,\n                }),\n                invalidatesTags: [{ type: 'Todo', id: 'LIST' }],\n            }),\n        };\n    },\n});\n\nexport const { useLoginMutation, useRegisterMutation, useLogoutMutation, useFetchTodosQuery, useAddTodoMutation } = todosApi;\nexport default todosApi;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EACvBG,WAAW,EAAE,OAAO;EACpBC,SAAS,EAAEH,cAAc,CAAC;IACtBI,OAAO,EAAE,6CAA6C;IACtDC,cAAc,EAAEA,CAACC,OAAO,EAAE;MAAEC;IAAS,CAAC,KAAK;MACvC,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK,CAAC,CAAE;MACtC,IAAIA,KAAK,EAAE;QACPF,OAAO,CAACI,GAAG,CAAC,eAAe,EAAE,UAAUF,KAAK,EAAE,CAAC;MACnD;MACA,OAAOF,OAAO;IAClB;EACJ,CAAC,CAAC;EACFK,QAAQ,EAAE,CAAC,MAAM,CAAC;EAClBC,SAASA,CAACC,OAAO,EAAE;IACf,OAAO;MACH;MACAC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;QACpBC,KAAK,EAAGC,WAAW,KAAM;UACrBC,GAAG,EAAE,iBAAiB;UACtBC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEH;QACV,CAAC;MACL,CAAC,CAAC;MACFI,QAAQ,EAAER,OAAO,CAACE,QAAQ,CAAC;QACvBC,KAAK,EAAGM,QAAQ,KAAM;UAClBJ,GAAG,EAAE,oBAAoB;UACzBC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEE;QAEV,CAAC;MACL,CAAC,CAAC;MACFC,MAAM,EAAEV,OAAO,CAACE,QAAQ,CAAC;QACrBC,KAAK,EAAEA,CAAA,MAAO;UACVE,GAAG,EAAE,kBAAkB;UACvBC,MAAM,EAAE;QACZ,CAAC;MACL,CAAC,CAAC;MACF;MACAK,UAAU,EAAEX,OAAO,CAACG,KAAK,CAAC;QACtBA,KAAK,EAAEA,CAAA,KAAM,YAAY;QACzBS,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACA,CAAC,GAAGA,MAAM,CAACC,GAAG,CAAC,CAAC;UAAEC;QAAG,CAAC,MAAM;UAAEC,IAAI,EAAE,MAAM;UAAED;QAAG,CAAC,CAAC,CAAC,EAAE;UAAEC,IAAI,EAAE,MAAM;UAAED,EAAE,EAAE;QAAO,CAAC,CAAC,GACjF,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAED,EAAE,EAAE;QAAO,CAAC;MAC3C,CAAC,CAAC;MACFE,OAAO,EAAEjB,OAAO,CAACE,QAAQ,CAAC;QACtBC,KAAK,EAAGe,OAAO,KAAM;UACjBb,GAAG,EAAE,YAAY;UACjBC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEW;QACV,CAAC,CAAC;QACFC,eAAe,EAAE,CAAC;UAAEH,IAAI,EAAE,MAAM;UAAED,EAAE,EAAE;QAAO,CAAC;MAClD,CAAC;IACL,CAAC;EACL;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEK,gBAAgB;EAAEC,mBAAmB;EAAEC,iBAAiB;EAAEC,kBAAkB;EAAEC;AAAmB,CAAC,GAAGpC,QAAQ;AAC5H,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}