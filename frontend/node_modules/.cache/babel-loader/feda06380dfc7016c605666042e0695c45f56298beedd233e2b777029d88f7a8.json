{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst todosApi = createApi({\n  reducerPath: 'todosApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://todo-list-backend-nvp1.onrender.com',\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const token = getState().auth.token; // Get token from Redux store\n      if (token) {\n        headers.set('Authorization', `Bearer ${token}`); // Attach token to Authorization header\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Todo'],\n  endpoints: builder => ({\n    fetchTodos: builder.query({\n      query: userId => `/api/todos/${userId}`,\n      providesTags: result => result ? [...result.map(({\n        id\n      }) => ({\n        type: 'Todo',\n        id\n      })), {\n        type: 'Todo',\n        id: 'LIST'\n      }] : [{\n        type: 'Todo',\n        id: 'LIST'\n      }]\n    }),\n    addTodo: builder.mutation({\n      query: newTodo => ({\n        url: '/api/todos',\n        method: 'POST',\n        body: newTodo\n      }),\n      invalidatesTags: [{\n        type: 'Todo',\n        id: 'LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useFetchTodosQuery,\n  useAddTodoMutation\n} = todosApi;\nexport default todosApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","todosApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","token","auth","set","tagTypes","endpoints","builder","fetchTodos","query","userId","providesTags","result","map","id","type","addTodo","mutation","newTodo","url","method","body","invalidatesTags","useFetchTodosQuery","useAddTodoMutation"],"sources":["/Users/anbschool0021/Documents/Backend-frontend/frontend/src/store/apis/todosApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst todosApi = createApi({\n  reducerPath: 'todosApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://todo-list-backend-nvp1.onrender.com',\n    prepareHeaders: (headers, { getState }) => {\n        const token = getState().auth.token; // Get token from Redux store\n        if (token) {\n          headers.set('Authorization', `Bearer ${token}`); // Attach token to Authorization header\n        }\n        return headers;\n      },\n  }),\n  tagTypes: ['Todo'],\n  endpoints: (builder) => ({\n    fetchTodos: builder.query({\n      query: (userId) =>  `/api/todos/${userId}`,\n      providesTags: (result) =>\n        result\n          ? [...result.map(({ id }) => ({ type: 'Todo', id })), { type: 'Todo', id: 'LIST' }]\n          : [{ type: 'Todo', id: 'LIST' }],\n    }),\n    addTodo: builder.mutation({\n      query: (newTodo) => ({\n        url: '/api/todos',\n        method: 'POST',\n        body: newTodo,\n      }),\n      invalidatesTags: [{ type: 'Todo', id: 'LIST' }],\n    }),\n  }),\n});\n\nexport const { useFetchTodosQuery, useAddTodoMutation } = todosApi;\nexport default todosApi;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EACzBG,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEH,cAAc,CAAC;IACxBI,OAAO,EAAE,6CAA6C;IACtDC,cAAc,EAAEA,CAACC,OAAO,EAAE;MAAEC;IAAS,CAAC,KAAK;MACvC,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK,CAAC,CAAC;MACrC,IAAIA,KAAK,EAAE;QACTF,OAAO,CAACI,GAAG,CAAC,eAAe,EAAE,UAAUF,KAAK,EAAE,CAAC,CAAC,CAAC;MACnD;MACA,OAAOF,OAAO;IAChB;EACJ,CAAC,CAAC;EACFK,QAAQ,EAAE,CAAC,MAAM,CAAC;EAClBC,SAAS,EAAGC,OAAO,KAAM;IACvBC,UAAU,EAAED,OAAO,CAACE,KAAK,CAAC;MACxBA,KAAK,EAAGC,MAAM,IAAM,cAAcA,MAAM,EAAE;MAC1CC,YAAY,EAAGC,MAAM,IACnBA,MAAM,GACF,CAAC,GAAGA,MAAM,CAACC,GAAG,CAAC,CAAC;QAAEC;MAAG,CAAC,MAAM;QAAEC,IAAI,EAAE,MAAM;QAAED;MAAG,CAAC,CAAC,CAAC,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAED,EAAE,EAAE;MAAO,CAAC,CAAC,GACjF,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAED,EAAE,EAAE;MAAO,CAAC;IACrC,CAAC,CAAC;IACFE,OAAO,EAAET,OAAO,CAACU,QAAQ,CAAC;MACxBR,KAAK,EAAGS,OAAO,KAAM;QACnBC,GAAG,EAAE,YAAY;QACjBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC;QAAEP,IAAI,EAAE,MAAM;QAAED,EAAE,EAAE;MAAO,CAAC;IAChD,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAES,kBAAkB;EAAEC;AAAmB,CAAC,GAAG7B,QAAQ;AAClE,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}